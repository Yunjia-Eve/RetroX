# -*- coding: utf-8 -*-
"""Streamlit app_RetroX

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14fxfcb2e7HR7HaBrV6-zV2BK04RK9eOP
"""

!pip install streamlit

# =====================================================
# üåø RetroX Surrogate Toolkit ‚Äì Streamlit Web App
# =====================================================
import streamlit as st
import pandas as pd
import numpy as np
import joblib
import matplotlib.pyplot as plt

# -----------------------------------------------------
# 1. Helper: fixed room electricity lookup
# -----------------------------------------------------
def estimate_room_electricity(insulation, coolpaint):
    """Return fixed Room_Electricity_kWh based on insulation & cool paint combo."""
    table = {
        ('Low', 0): 31598.30,
        ('Low', 1): 31556.63,
        ('Medium', 0): 31452.52,
        ('Medium', 1): 31410.90,
        ('High', 0): 31202.98,
        ('High', 1): 31161.43
    }
    return table.get((insulation, coolpaint), np.mean(list(table.values())))

# -----------------------------------------------------
# 2. Load models
# -----------------------------------------------------
models = {
    'Lighting_kWh': joblib.load('2025-10-26 Lighting_kWh_model.pkl'),
    'Cooling_kWh': joblib.load('2025-10-26 Cooling_kWh_model.pkl'),
    'Cooling_Load_kWh': joblib.load('2025-10-26 Cooling_Load_kWh_model.pkl')
}

trained_columns = [
    'LPD_Wm2', 'HVAC_Setpoint_C', 'ShadingDepth_m',
    'Glazing_Low-E', 'Glazing_Single',
    'Insulation_Low', 'Insulation_Medium',
    'ScheduleAdj_Base', 'LinearControl_Yes', 'HighAlbedoWall_Cool'
]

# -----------------------------------------------------
# 3. Streamlit UI
# -----------------------------------------------------
st.set_page_config(page_title="RetroX Surrogate Toolkit", layout="centered")
st.title("üåø RetroX Surrogate Toolkit")
st.markdown("Predict retrofit energy outcomes instantly ‚Äî no EnergyPlus simulation needed.")

st.sidebar.header("üè¢ Building Inputs")
glazing = st.sidebar.selectbox("Glazing Type", ['Single', 'Low-E'])
insul = st.sidebar.selectbox("Insulation", ['Low', 'Medium', 'High'])
LPD = st.sidebar.slider("LPD (W/m¬≤)", 8.0, 14.0, 10.0)
hvac = st.sidebar.slider("HVAC Setpoint (¬∞C)", 24.0, 27.0, 25.0)
shading = st.sidebar.slider("Shading Depth (m)", 0.25, 1.0, 0.5)
schedule = st.sidebar.radio("Schedule Adjustment", ['Base', 'Adjusted'])
ctrl = st.sidebar.radio("Linear Control", ['No', 'Yes'])
albedo = st.sidebar.radio("High Albedo Wall", ['Normal', 'Cool'])

# -----------------------------------------------------
# 4. Encode input to match training features
# -----------------------------------------------------
row = pd.DataFrame({
    'LPD_Wm2': [LPD],
    'HVAC_Setpoint_C': [hvac],
    'ShadingDepth_m': [shading],
    'Glazing_Low-E': [1 if glazing == 'Low-E' else 0],
    'Glazing_Single': [1 if glazing == 'Single' else 0],
    'Insulation_Low': [1 if insul == 'Low' else 0],
    'Insulation_Medium': [1 if insul == 'Medium' else 0],
    'ScheduleAdj_Base': [1 if schedule == 'Base' else 0],
    'LinearControl_Yes': [1 if ctrl == 'Yes' else 0],
    'HighAlbedoWall_Cool': [1 if albedo == 'Cool' else 0]
})
X_input = row.reindex(columns=trained_columns, fill_value=0)

# -----------------------------------------------------
# 5. Predict using trained surrogate models
# -----------------------------------------------------
lighting_pred = models['Lighting_kWh'].predict(X_input)[0]
cooling_pred = models['Cooling_kWh'].predict(X_input)[0]
room_elec = estimate_room_electricity(insul, 1 if albedo == 'Cool' else 0)
cooling_load = models['Cooling_Load_kWh'].predict(X_input)[0]
total = lighting_pred + cooling_pred + room_elec

# -----------------------------------------------------
# 6. Display results
# -----------------------------------------------------
st.subheader("üîÆ Predicted Energy Breakdown")
st.write(f"**Lighting:** {lighting_pred:,.1f} kWh")
st.write(f"**Cooling:** {cooling_pred:,.1f} kWh")
st.write(f"**Room Electricity (fixed):** {room_elec:,.1f} kWh")
st.write(f"**Total Energy Use:** {total:,.1f} kWh")
st.write(f"**Cooling Load:** {cooling_load:,.1f} kWh (Envelope load)")

# -----------------------------------------------------
# 7. Add energy breakdown chart
# -----------------------------------------------------
energy_breakdown = pd.DataFrame({
    'Component': ['Lighting', 'Cooling', 'Room Electricity'],
    'Energy_kWh': [lighting_pred, cooling_pred, room_elec]
})
fig, ax = plt.subplots()
ax.bar(energy_breakdown['Component'], energy_breakdown['Energy_kWh'])
ax.set_ylabel('Energy (kWh)')
ax.set_title('Energy Breakdown by End-Use')
st.pyplot(fig)

# -----------------------------------------------------
# 8. Footer
# -----------------------------------------------------
st.markdown("---")
st.caption("RetroX v1.0 | Developed by Eve üåø | Powered by Random Forest Surrogates")